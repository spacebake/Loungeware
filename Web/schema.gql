type Query {
  node(id: String!): Node!
  clientVersion: String!
  user(id: String!): User!
  me: User!
  guestbooks: [Guestbook!]!
  guestbook(id: String!): Guestbook!
  pageVisits(route: String!): PageVisit!
  microgame(gameSlug: String!): Microgame!
  microgamesFromAuthor(userId: String!): Microgame!
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  displayName: String!
  profilePictureUrl: String!
  roles: [DiscordRole!]!
}

type DiscordRole {
  id: ID!
  displayName: String!
  colorHex: String!
}

type Guestbook implements Node {
  id: ID!
  authorUserId: String!
  text: String!
  createdAt: Float!
  author: User!
}

type PageVisit implements Node {
  id: ID!
  route: String!
  visits: Float!
}

type Microgame implements Node {
  id: ID!
  author: User!
  ratings: [MicrogameRating!]!
  hasMyRating: Boolean!
}

type MicrogameRating implements Node {
  id: ID!
  isFavorited: Boolean!
  difficulty: Float!
  comment: String!
  createdAt: Float!
  editedAt: Float!
  author: User!
}

type Mutation {
  guestbookCreate(input: GuestbookCreateInput!): Guestbook!
  addMicrogameRating(input: AddMicrogameRatingInput!): MicrogameRating!
}

input GuestbookCreateInput {
  text: String!
}

input AddMicrogameRatingInput {
  microgameId: String!
  comment: String!
  difficulty: Float!
  isFavorited: Boolean!
}
